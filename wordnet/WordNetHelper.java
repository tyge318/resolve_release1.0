// Class with some static WordNet helper functionspackage wordnet;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import net.didion.jwnl.*;import net.didion.jwnl.data.*;import net.didion.jwnl.data.list.*;import net.didion.jwnl.data.relationship.*;import net.didion.jwnl.dictionary.*;public class WordNetHelper {    // Dictionary object    public static Dictionary wordnet;    private int MaxWordLength = 50;    private static MorphologicalProcessor morph;	public static HashMap AllWords = null;    // Initialize the database!    public static void initialize(String propsFile) {        //String propsFile = "file_properties.xml";        try {            JWNL.initialize(new FileInputStream(propsFile));        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (JWNLException e) {            e.printStackTrace();        }        // Create dictionary object        wordnet = Dictionary.getInstance();        morph = wordnet.getMorphologicalProcessor();        AllWords = new HashMap();    }    public static void termination() {    	wordnet = null;    	morph = null;    	AllWords = null;    	System.gc();    }    public static boolean isRelationship(String source, String target, PointerType type) throws JWNLException {    	Relationship relate;    	boolean condition = false;    	if( (wordnet.getIndexWord(POS.VERB, source)!= null) && (wordnet.getIndexWord(POS.VERB, target) != null)  ) {    		relate = getRelationship( wordnet.getIndexWord(POS.VERB, source),  wordnet.getIndexWord(POS.VERB, target), type);    		if( relate != null)	condition = true;    	}    	if( (wordnet.getIndexWord(POS.ADJECTIVE, source)!= null) && (wordnet.getIndexWord(POS.ADJECTIVE, target) != null)  ) {    		relate = getRelationship( wordnet.getIndexWord(POS.ADJECTIVE, source),  wordnet.getIndexWord(POS.ADJECTIVE, target), type);    		if( relate != null)	condition = true;    	}    	if( (wordnet.getIndexWord(POS.ADVERB, source)!= null) && (wordnet.getIndexWord(POS.ADVERB, target) != null)  ) {    		relate = getRelationship( wordnet.getIndexWord(POS.ADVERB, source),  wordnet.getIndexWord(POS.ADVERB, target), type);    		if( relate != null)	condition = true;    	}    	if( (wordnet.getIndexWord(POS.NOUN, source)!= null) && (wordnet.getIndexWord(POS.NOUN, target) != null)  ) {    		relate = getRelationship( wordnet.getIndexWord(POS.NOUN, source),  wordnet.getIndexWord(POS.NOUN, target), type);    		if( relate != null)	condition = true;    	}    	return condition;    }    public static boolean isVerb(String word) throws JWNLException {    	boolean result = false;    	POS[] pos = getPOS(word);    	for(int i=0; i<pos.length; i++) {    		if(pos[i].getLabel().equals("verb")) {    			result = true;    			break;    		}    	}    	return result;    }    // Return array of POS objects for a given String    public static POS[] getPOS(String s) throws JWNLException {        // Look up all IndexWords (an IndexWord can only be one POS)        IndexWordSet set = wordnet.lookupAllIndexWords(s);        // Turn it into an array of IndexWords        IndexWord[] words = set.getIndexWordArray();        // Make the array of POS        POS[] pos = new POS[words.length];        for (int i = 0; i < words.length; i++) {            pos[i] = words[i].getPOS();        }        return pos;    }    // Just gets the related words for first sense of a word    // Revised to get the list of related words for the 1st Synset that has them    // We might want to try all of them    public static ArrayList getRelated(IndexWord word, PointerType type) throws JWNLException {    	ArrayList a = null;        try {            Synset[] senses = word.getSenses();                    // Look for the related words for all Senses            for (int i = 0; i < senses.length; i++) {            	if( a == null)            		a = getRelated(senses[i],type);            	else            		a.addAll(getRelated(senses[i],type));                          }        } catch (NullPointerException e) {            // System.out.println("Oops, NULL problem: " + e);        }//        Collections.sort(a);        return a;    }    // Related words for a given sense (do synonyms by default)    // Probably should implement all PointerTypes    public static ArrayList getRelated (Synset sense, PointerType type) throws JWNLException, NullPointerException {        PointerTargetNodeList relatedList;        // Call a different function based on what type of relationship you are looking for        if (type == PointerType.HYPERNYM) {            relatedList = PointerUtils.getInstance().getDirectHypernyms(sense);        } else if (type == PointerType.HYPONYM){            relatedList = PointerUtils.getInstance().getDirectHyponyms(sense);        } else {            relatedList = PointerUtils.getInstance().getSynonyms(sense);        }        // Iterate through the related list and make an ArrayList of Synsets to send back        Iterator i = relatedList.iterator();        ArrayList a = new ArrayList();        while (i.hasNext()) {            PointerTargetNode related = (PointerTargetNode) i.next();            Synset s = related.getSynset();            a.add(s);        }        return a;    }    // Just shows the Tree of related words for first sense    // We may someday want to the Tree for all senses    public static void showRelatedTree(IndexWord word, int depth, PointerType type) throws JWNLException {        showRelatedTree(word.getSense(1), depth, type);    }    public static void showRelatedTree(Synset sense, int depth, PointerType type) throws JWNLException {        PointerTargetTree relatedTree;        // Call a different function based on what type of relationship you are looking for        if (type == PointerType.HYPERNYM) {            relatedTree = PointerUtils.getInstance().getHypernymTree(sense,depth);        } else if (type == PointerType.HYPONYM){            relatedTree = PointerUtils.getInstance().getHyponymTree(sense,depth);        } else {            relatedTree = PointerUtils.getInstance().getSynonymTree(sense,depth);        }        // If we really need this info, we wil have to write some code to Process the tree        // Not just display it          relatedTree.print();    }    // This method looks for any possible relationship    public static Relationship getRelationship (IndexWord start, IndexWord end, PointerType type) throws JWNLException {        // All the start senses        Synset[] startSenses = start.getSenses();        // All the end senses        Synset[] endSenses = end.getSenses();        // Check all against each other to find a relationship        for (int i = 0; i < startSenses.length; i++) {            for (int j = 0; j < endSenses.length; j++) {                RelationshipList list = RelationshipFinder.getInstance().findRelationships(startSenses[i], endSenses[j], type);                if (!list.isEmpty())  {                    return (Relationship) list.get(0);                }            }        }        return null;    }    // If you have a relationship, this function will create an ArrayList of Synsets    // that make up that relationship    public static ArrayList getRelationshipSenses (Relationship rel) throws JWNLException {        ArrayList a = new ArrayList();        PointerTargetNodeList nodelist = rel.getNodeList();        Iterator i = nodelist.iterator();        while (i.hasNext()) {            PointerTargetNode related = (PointerTargetNode) i.next();            a.add(related.getSynset());        }        return a;    }    // Get the IndexWord object for a String and POS    public static IndexWord getWord(POS pos, String s) throws JWNLException {        IndexWord word = wordnet.getIndexWord(pos,s);        return word;    }	 /* stems a word with wordnet	 * @param word word to stem	 * @return the stemmed word or null if it was not found in WordNet	 */	public static String StemWordWithWordNet ( String word )	{		if ( word == null ) return null;		if ( morph == null ) morph = wordnet.getMorphologicalProcessor();				IndexWord w;		try		{			w = morph.lookupBaseForm( POS.VERB, word );			if ( w != null )				return w.getLemma().toString ();			w = morph.lookupBaseForm( POS.NOUN, word );			if ( w != null )				return w.getLemma().toString();			w = morph.lookupBaseForm( POS.ADJECTIVE, word );			if ( w != null )				return w.getLemma().toString();			w = morph.lookupBaseForm( POS.ADVERB, word );			if ( w != null )				return w.getLemma().toString();		} 		catch ( JWNLException e )		{		}		return null;	}	/*	 * Stem a single word	 * tries to look up the word in the AllWords HashMap	 * If the word is not found it is stemmed with WordNet	 * and put into AllWords	 * 	 * @param word word to be stemmed	 * @return stemmed word	 */	public static String Stem( String word )	{		// check if we already know the word		String stemmedword = (String) AllWords.get( word );		if ( stemmedword != null )			return stemmedword; // return it if we already know it				// don't check words with digits in them		if ( word.matches("[0-9]+") )			stemmedword = null;		else	// unknown word: try to stem it			stemmedword = StemWordWithWordNet (word);				if ( stemmedword != null )		{			// word was recognized and stemmed with wordnet:			// add it to hashmap and return the stemmed word			AllWords.put( word, stemmedword );			return stemmedword;		}		// word could not be stemmed by wordnet, 		// thus it is no correct english word		// just add it to the list of known words so 		// we won't have to look it up again		AllWords.put( word, word );//		return null; //filter out unknown words		return word;	}	}